---
interface Props {
	title: string;
}

const { title } = Astro.props;

export const prerender = true;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="bg-white dark:bg-black">
		<main class="mt-4">
			<div class="grid place-content-end mr-2">
				<button
					id="theme-toggle"
					type="button"
					class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5"
				>
					<svg
						id="theme-toggle-dark-icon"
						class="hidden w-5 h-5"
						fill="currentColor"
						viewBox="0 0 20 20"
						xmlns="http://www.w3.org/2000/svg"
						><path
							d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
						></path></svg
					>
					<svg
						id="theme-toggle-light-icon"
						class="hidden w-5 h-5"
						fill="currentColor"
						viewBox="0 0 20 20"
						xmlns="http://www.w3.org/2000/svg"
						><path
							d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
							fill-rule="evenodd"
							clip-rule="evenodd"></path></svg
					>
				</button>
			</div>
			<slot />
		</main>
	</body>
</html>

<script>
	var themeToggleDarkIcon = document.getElementById(
		"theme-toggle-dark-icon",
	) as HTMLElement;
	var themeToggleLightIcon = document.getElementById(
		"theme-toggle-light-icon",
	) as HTMLElement;
	window.addEventListener("DOMContentLoaded",()=> {
		// Change the icons inside the button based on previous settings
		const mode = localStorage.getItem("color-theme");

		if (!mode) {
			setMode("light");
			return;
		}

		if (mode === "dark") {
			setMode("light");
			return;
		}

		setMode("dark");
	}) 

	var themeToggleBtn = document.getElementById("theme-toggle") as HTMLElement;

	themeToggleBtn.addEventListener("click", () => changeMode());

	const changeMode = () => {
		const mode = localStorage.getItem("color-theme") as string;

		// toggle icons inside button
		themeToggleDarkIcon.classList.toggle("hidden");
		themeToggleLightIcon.classList.toggle("hidden");
		if (mode === "light") {
			setMode(mode);
			return;
		}

		setMode(mode);
		return;
	};

	const setMode = (mode: string) => {
		document.documentElement.classList.remove(mode);
		document.documentElement.classList.add(
			mode == "dark" ? "light" : "dark",
		);
		localStorage.setItem("color-theme", mode == "dark" ? "light" : "dark");
		if (mode == "dark") {
			themeToggleLightIcon.classList.remove("hidden");
			themeToggleDarkIcon.classList.add("hidden");
		}
		if (mode == "light") {
			themeToggleDarkIcon.classList.remove("hidden");
			themeToggleLightIcon.classList.add("hidden");
		}
	};
</script>
